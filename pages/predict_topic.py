import streamlit as st
import requests
import pandas as pd
# Configuration de la mise en page
st.set_page_config(
    page_title="NLP Topic Modeling",
    page_icon="üß†",
    layout="wide"
)

# En-t√™te principal avec un titre stylis√©
st.title("üß† Pr√©diction Topic Modeling")

# Introduction
st.markdown("""
Bienvenue sur l'interface de d√©ploiement du projet **NLP Topic Modeling**.
Utilisez cette application pour tester la connexion √† l'API et pr√©dire les th√®mes d'un texte √† l'aide de mod√®les de traitement du langage naturel (NLP).
""")

# Section pour tester la connexion avec l'API
st.header("üîå Tester la connexion √† l'API")

# Utilisation de colonnes pour une pr√©sentation plus fluide
col1, col2 = st.columns([2, 5])

with col1:
    st.image("https://upload.wikimedia.org/wikipedia/commons/thumb/4/45/Lightbulb_icon.svg/2048px-Lightbulb_icon.svg.png", width=100)

with col2:
    # Bouton pour tester la connexion √† l'API
    if st.button("üîç Tester la connexion API"):
        try:
            # URL de l'API pour v√©rifier son statut
            status_url = "https://topicwebapp-g0g7hshfhugta5cy.francecentral-01.azurewebsites.net/status"
            response = requests.get(status_url)

            # Afficher la r√©ponse
            if response.status_code == 200:
                st.success("L'API est en ligne! üöÄ")
            else:
                st.error(f"Erreur de connexion √† l'API: {response.status_code}")
        except Exception as e:
            st.error(f"Erreur lors de la tentative de connexion: {e}")

# S√©paration visuelle
st.markdown("---")

# Section pour faire une pr√©diction
st.header("üìù Faire une pr√©diction sur un texte")

# Explication suppl√©mentaire
st.markdown("Entrez un texte dans la zone ci-dessous et obtenez une pr√©diction sur les topics probables.")

# Utilisation d'une zone de texte pour entrer le texte utilisateur
user_input = st.text_area("üí¨ Entrez le texte pour lequel vous souhaitez pr√©dire les topics:", height=150)

# Bouton pour valider et envoyer la pr√©diction
if st.button("üìä Valider"):
    if user_input.strip():
        try:
            # URL de l'API pour faire la pr√©diction
            predict_url = "https://topicwebapp-g0g7hshfhugta5cy.francecentral-01.azurewebsites.net/predict"

            # Donn√©es √† envoyer √† l'API
            data = {"text": user_input}

            # Requ√™te POST pour obtenir les pr√©dictions
            response = requests.post(predict_url, json=data)

            # V√©rifier la r√©ponse de l'API
            if response.status_code == 200:
                # Extraire la distribution des topics de la r√©ponse
                prediction = response.json()

                # Afficher les r√©sultats sous forme de tableau
                st.write("### üìã Distribution des Topics")
                topics = prediction.get("topic_distribution", [])
                if topics:
                    # Utiliser un tableau pour une meilleure pr√©sentation
                    df = pd.DataFrame(topics)
                    df.columns = ["Th√®me", "Probabilit√©"]
                    df["Probabilit√©"] = df["Probabilit√©"].apply(lambda x: f"{x:.2f}")
                    st.table(df)
                else:
                    st.warning("Aucune distribution de topics re√ßue.")
            else:
                st.error(f"Erreur de pr√©diction: {response.status_code}")
        except Exception as e:
            st.error(f"Erreur lors de l'envoi de la requ√™te: {e}")
    else:
        st.warning("‚ö†Ô∏è Veuillez entrer un texte avant de valider.")

# Pied de page avec une note d'information
st.markdown("""
---
*Cette application utilise un mod√®le de NLP pour extraire les topics d'un texte donn√©. Elle se connecte √† une API h√©berg√©e pour obtenir les pr√©dictions.*
""")
